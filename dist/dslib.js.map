{"version":3,"sources":["webpack://DsLib/webpack/universalModuleDefinition","webpack://DsLib/webpack/bootstrap","webpack://DsLib/./src/LinkedList.js","webpack://DsLib/./src/Dictionary.js","webpack://DsLib/./src/HashSet.js","webpack://DsLib/./src/StackList.js","webpack://DsLib/./src/QueueList.js","webpack://DsLib/./src/common/DsNode.js","webpack://DsLib/./src/common/LinkedListNode.js","webpack://DsLib/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_LinkedListNode","LinkedList","_classCallCheck","this","_start","_last","_length","getStart","setStart","start","getLast","setLast","last","getLength","setLength","length","addItem","itemValue","newNode","LinkedListNode","data","next","addItemAtStart","addItemAtIndex","index","Error","currentNode","currentIndex","nextNode","getLastItem","getFirstItem","getItemAtIndex","removeFirstItem","removeLastItem","removeItemAtIndex","deleteNode","updateItem","map","callback","toArray","listArray","push","_map","Dictionary","_Dictionary","Map","set","key","keys","forEach","values","has","entries","delete","clear","isEmpty","size","_createClass","Set","add","element","undefined","_typeof","JSON","stringify","testSet","remove","contains","setArray","iConverted","Number","String","Boolean","parse","_LinkedList","StackList","list","item","pop","popElement","peek","QueueList","enqueue","dequeue","Node","_DsNode","_this","_possibleConstructorReturn","_Node"],"mappings":"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","file":"dslib.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DsLib\"] = factory();\n\telse\n\t\troot[\"DsLib\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","import { LinkedListNode } from './common/LinkedListNode';\n/**\n * \n * \n * @class _LinkedList\n */\nexport class LinkedList {\n  /**\n   * Creates an instance of LinkedList.\n   * @memberof LinkedList\n   */\n  constructor() {\n    let _start = null;\n    let _last = null;\n    let _length = 0;\n\n    this.getStart = () => _start;\n    this.setStart = start => _start = start;\n\n    this.getLast = () => _last;\n    this.setLast = last => _last = last;\n\n    this.getLength = () => _length;\n    this.setLength = length => _length = length;\n  }\n\n  /**\n   * The length of the linked list\n   * \n   * @readonly\n   * @memberof LinkedList\n   */\n  get length() {\n    return this.getLength();\n  }\n\n  /**\n   * Adds a new item in the tail of linked list\n   * \n   * @param {any} itemValue Item to be added\n   * @returns {void} \n   * @memberof LinkedList\n   */\n  addItem(itemValue) {\n    let newNode = new LinkedListNode();\n    newNode.data = itemValue;\n    newNode.next = null;\n\n    if (this.getStart() == null) {\n      this.setStart(newNode);\n    } else {\n      this.getLast().next = newNode;\n    }\n    this.setLast(newNode);\n    this.setLength(this.getLength() + 1);\n  }\n\n  /**\n   * Adds an item at the head of the linked list\n   * \n   * @param {any} itemValue Item to be added\n   * @returns {void}\n   * @memberof LinkedList\n   */\n  addItemAtStart(itemValue) {\n    let newNode = new LinkedListNode();\n    newNode.data = itemValue;\n    newNode.next = null;\n\n    if (this.getStart() == null) {\n      this.setStart(newNode);\n      this.setLast(newNode);\n    } else {\n      newNode.next = this.getStart();\n      this.setStart(newNode);\n    }\n    this.setLength(this.getLength() + 1);\n  }\n\n  /**\n   * Adds an item in the linked list at the given index\n   * \n   * @param {number} index Index\n   * @param {any} data Item to be added\n   * @returns {void}\n   * @memberof LinkedList\n   */\n  addItemAtIndex(index, data) {\n    if (index > this.getLength()) {\n      throw new Error('Index greater than the length of List');\n    } else if (index == this.getLength()) {\n      this.addItem(data);\n    } else if (index == 0) {\n      this.addItemAtStart(data);\n    } else {\n      let newNode = new LinkedListNode();\n      newNode.data = data;\n      newNode.next = null;\n      let currentNode = this.getStart();\n      let currentIndex = 0;\n      while (currentIndex < index - 1) {\n        currentNode = currentNode.next;\n        currentIndex++;\n      }\n      let nextNode = currentNode.next;\n      currentNode.next = newNode;\n      newNode.next = nextNode;\n      this.setLength(this.getLength() + 1);\n    }\n  }\n\n  /**\n   * Gets the last item of the linked list\n   * \n   * @returns {any} The last item\n   * @memberof LinkedList\n   */\n  getLastItem() {\n    return this.getLast() && this.getLast().data;\n  }\n\n  /**\n   * Gets the first item of the linked list\n   * \n   * @returns {any} The first item\n   * @memberof LinkedList\n   */\n  getFirstItem() {\n    return this.getStart() && this.getStart().data;\n  }\n\n  /**\n   * Gets an item from the linked list at the given index\n   * \n   * @param {number} index Index\n   * @returns {any} The item\n   * @memberof LinkedList\n   */\n  getItemAtIndex(index) {\n    if (index >= this.getLength()) {\n      throw new Error('Index greater than the length of List');\n    }\n    if (index == this.getLength() - 1) {\n      return this.getLastItem();\n    }\n    if (index == 0) {\n      return this.getFirstItem();\n    }\n    let currentNode = this.getStart();\n    let currentIndex = 0;\n    while (currentIndex < index) {\n      currentNode = currentNode.next;\n      currentIndex++;\n    }\n    return currentNode.data;\n  }\n\n  /**\n   * Removes the first item from the linked list\n   * \n   * @returns {void}\n   * @memberof LinkedList\n   */\n  removeFirstItem() {\n    if (this.getStart() == null) {\n      throw new Error('Cannot remove element from an empty List');\n    }\n    if (this.getLength() == 1) {\n      this.setStart(null); this.setLast(null);\n      this.setLength(0);\n    } else {\n      this.setStart(this.getStart().next);\n      this.setLength(this.getLength() - 1);\n    }\n  }\n\n  /**\n   * Removes the last item from the linked list\n   * \n   * @returns {void}\n   * @memberof LinkedList\n   */\n  removeLastItem() {\n    this.removeItemAtIndex(this.getLength() - 1);\n  }\n\n  /**\n   * Removes an item at the given index of linked list\n   * \n   * @param {number} index \n   * @returns {void}\n   * @memberof LinkedList\n   */\n  removeItemAtIndex(index) {\n    if (index >= this.getLength()) {\n      throw new Error('Index greater than the length of List');\n    }\n    if (index == 0) {\n      this.removeFirstItem();\n    } else {\n      let currentNode = this.getStart();\n      let currentIndex = 0;\n      while (currentIndex < index - 1) {\n        currentNode = currentNode.next;\n        currentIndex++;\n      }\n      let deleteNode = currentNode.next;\n      currentNode.next = deleteNode.next;\n      if (index == this.getLength() - 1) {\n        this.setLast(currentNode);\n      }\n      this.setLength(this.getLength() - 1);\n    }\n  }\n\n  /**\n   * Updates an item of the linked list\n   * \n   * @param {number} index The index\n   * @param {any} value New value\n   * @returns {void}\n   * @memberof LinkedList\n   */\n  updateItem(index, value) {\n    if (index >= this.getLength()) {\n      throw new Error('Index greater than the length of List');\n    }\n    let currentNode = this.getStart();\n    let currentIndex = 0;\n    while (currentIndex < index) {\n      currentNode = currentNode.next;\n      currentIndex++;\n    }\n    currentNode.data = value;\n  }\n\n  /**\n   * Map function for the linked list\n   * \n   * @param {Function} callback \n   * @returns {void}\n   * @memberof LinkedList\n   */\n  map(callback) {\n    let currentNode = this.getStart();\n    let index = 0;\n    while (currentNode !== null) {\n      if (callback.length == 2) {\n        callback(index, currentNode.data);\n      } else {\n        callback(currentNode.data);\n      }\n      currentNode = currentNode.next;\n      index++;\n    }\n  }\n\n  /**\n   * Returns the linked list in the form of an array\n   * \n   * @returns {any[]} The linked list as an array\n   * @memberof LinkedList\n   */\n  toArray() {\n    let listArray = [];\n    this.map((value) => {\n      listArray.push(value);\n    })\n    return listArray;\n  }\n}\n","export const Dictionary = (function () {\n  let _map = null;\n\n  class _Dictionary {\n    constructor() {\n      _map = new Map();\n    }\n\n    get size() {\n      return _map.size;  \n    }\n\n    set(key, value) {\n      _map.set(key, value);\n    }\n\n    get(key) {\n      return _map.get(key);\n    }\n\n    keys() {\n      let keys = [];\n      _map.forEach((value, key) => {\n        keys.push(key);\n      });\n      return keys;\n    }\n\n    values() {\n      let values = [];\n      _map.forEach((value, key) => {\n        values.push(value);\n      });\n      return values;\n    }\n\n    has(key) {\n      return _map.has(key);\n    }\n\n    map(callback) {\n      if(callback.length == 1) {\n        _map.forEach((value, key) => {\n          callback(value);\n        });\n      } else {\n        _map.forEach((value, key) => {\n          callback(key, value);\n        })\n      }\n    }\n\n    entries() {\n      let entries = [];\n      _map.forEach((value, key) => {\n        entries.push([key, value]);\n      })\n      return entries;\n    }\n\n    delete(key) {\n      _map.delete(key);\n    }\n\n    clear() {\n      _map.clear();\n    }\n\n    isEmpty() {\n      return _map.size === 0;\n    }\n  }\n  return _Dictionary;\n})();","export function Set() {\n\tvar set = {};\n\tthis.add = function (element) {\n\t\tif (set[element] != undefined || typeof element == \"undefined\" || typeof element == \"function\") {\n\t\t\treturn false;\n\t\t}\n\t\telse if (typeof element == \"object\" && element != null) {\n\t\t\tset[JSON.stringify(element)] = \"object\";\n\t\t}\n\t\telse\n\t\t\tset[element] = typeof element;\n\t\treturn true;\n\t}\n\n\tthis.testSet = function () {\n\t\treturn set;\n\t}\n\n\tthis.remove = function (element) {\n\t\tif (typeof element == \"object\" && element != null) {\n\t\t\telement = JSON.stringify(element)\n\t\t}\n\t\telse if (typeof set[element] == \"undefined\" || typeof element == \"undefined\" || typeof element == \"function\") {\n\t\t\treturn false;\n\t\t}\n\t\tdelete set[element];\n\t\treturn true;\n\t}\n\n\tthis.contains = function (element) {\n\t\tif (typeof set[element] == \"undefined\") {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tthis.toArray = function () {\n\t\tvar setArray = [];\n\t\tfor (var i in set) {\n\t\t\tvar iConverted = null;\n\t\t\tswitch (set[i]) {\n\t\t\t\tcase \"number\":\n\t\t\t\t\tiConverted = Number(i);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"string\":\n\t\t\t\t\tiConverted = String(i);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\tiConverted = Boolean(i);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"object\":\n\t\t\t\t\tiConverted = JSON.parse(i);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsetArray.push(iConverted);\n\t\t}\n\t\treturn setArray;\n\t}\n}\n","import { LinkedList } from './LinkedList';\n\n/**\n * StackList Class\n * \n * @export\n * @class StackList\n */\nexport class StackList {\n  /**\n   * Creates an instance of StackList.\n   * @memberof StackList\n   */\n  constructor() {\n    this.list = new LinkedList();\n  }\n\n  /**\n   * The length of the Stack\n   * \n   * @readonly\n   * @memberof StackList\n   */\n  get length() {\n    return this.list.length;\n  }\n\n  /**\n   * Adds an item into the stack, performs push operation on stack\n   * \n   * @param {any} item\tItem to push into stack\n   * @returns {void}\n   * @memberof StackList\n   */\n  push(item) {\n    this.list.addItem(item);\n  }\n\n  /**\n   * Removes the top item from the stack, performs pop operation on stack\n   * \n   * @returns {any}\tThe top element of stack\n   * @memberof StackList\n   */\n  pop() {\n    if (!this.isEmpty()) {\n      let popElement = this.list.getLastItem();\n      this.list.removeLastItem();\n      return popElement;\n    }\n    throw new Error('Cannot perform the pop operation, the stack is empty')\n  }\n\n  /**\n   * Returns the top element of the stack\n   * \n   * @returns {any} The top element of stack\n   * @memberof StackList\n   */\n  peek() {\n    return this.list.getLastItem();\n  }\n\n  /**\n   * Checks if the stack is empty\n   * \n   * @returns {boolean} True if stack is empty, false otherwise\n   * @memberof StackList\n   */\n  isEmpty() {\n    return this.list.length == 0;\n  }\n\n  /**\n   * Map function on the stack used to iterate each element\n   * \n   * @param {Function} callback \n   * @returns {void} \n   * @memberof StackList\n   */\n  map(callback) {\n    this.list.map(callback);\n  }\n\n  /**\n   * Returns the stack as an array\n   * \n   * @returns {any[]} \n   * @memberof StackList\n   */\n  toArray() {\n    return this.list.toArray();\n  }\n}","import { LinkedList } from './LinkedList';\n\n/**\n * QueueList class\n * \n * @export\n * @class QueueList\n */\nexport class QueueList {\n  /**\n   * Creates an instance of QueueList.\n   * @memberof QueueList\n   */\n  constructor() {\n    this.list = new LinkedList();\n  }\n\n  /**\n   * The length of queue\n   * \n   * @readonly\n   * @memberof QueueList\n   */\n  get length() {\n    return this.list.length;\n  }\n\n  /**\n   * Inserts an element in the tail of queue\n   * \n   * @param {any} item \n   * @returns {void}\n   * @memberof QueueList\n   */\n  enqueue(item) {\n    this.list.addItem(item);\n  }\n\n  /**\n   * Removes an element from the head of queue\n   * \n   * @returns {any} The Head of queue\n   * @memberof QueueList\n   */\n  dequeue() {\n    if (!this.isEmpty()) {\n      return this.list.removeFirstItem();\n    } else {\n      throw new Error('Cannot perform the dequeue operation, the Queue is empty');\n    }\n  }\n\n  /**\n   * Checks if the queue is empty\n   * \n   * @returns {boolean} True if queue is empty, false otherwise\n   * @memberof QueueList\n   */\n  isEmpty() {\n    return this.list.length == 0;\n  }\n\n  /**\n   * Returns the head element of queue, without removing it\n   * \n   * @returns {any} The head element of queue\n   * @memberof QueueList\n   */\n  peek() {\n    return this.list.getFirstItem();\n  }\n\n  /**\n   * Map function on the queue used to iterate each element\n   * \n   * @param {Function} callback \n   * @returns {void}\n   * @memberof QueueList\n   */\n  map(callback) {\n    this.list.map(callback);\n  }\n\n  /**\n   * Returns the queue in the form of an array\n   * \n   * @returns {any[]} The queue in array form\n   * @memberof QueueList\n   */\n  toArray() {\n    return this.list.toArray();\n  }\n}","/**\n * Node class\n * \n * @export\n * @class Node\n */\nexport class Node {\n  /**\n   * Creates an instance of Node.\n   * @memberof Node\n   */\n  constructor() {\n    this.data = null;\n  }\n}","import { Node } from './DsNode';\n\n/**\n * LinkedListNode class\n * \n * @export\n * @class LinkedListNode\n * @extends {Node}\n */\nexport class LinkedListNode extends Node {\n  /**\n   * Creates an instance of LinkedListNode.\n   * @memberof LinkedListNode\n   */\n  constructor() {\n    super();\n    this.next = null;\n  }\n} ","export { LinkedList } from './LinkedList';\nexport { QueueList } from './QueueList';\nexport { StackList } from './StackList';\nexport { Set } from './HashSet';\nexport { Dictionary } from './Dictionary';"],"sourceRoot":""}